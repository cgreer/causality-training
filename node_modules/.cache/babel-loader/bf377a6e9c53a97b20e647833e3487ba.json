{"ast":null,"code":"import _objectSpread from \"/Users/chris/causality_game/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/chris/causality_game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chris/causality_game/src/CausalGame.js\";\nimport React, { Component } from 'react';\nimport toposort from 'toposort';\nimport { createRandomDAG, dagToUndirected, graphIslands, maxDagEdges, randInt } from './DAG';\nimport EditNodeForm from './EditNodeForm';\nimport EditModelForm from './EditModelForm';\nimport FloatingMenu from './FloatingMenu';\nvar mirrorSpacing = 650;\n\nclass Node extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  render() {\n    let bgColor = \"green\";\n\n    if (this.props.fixed) {\n      bgColor = \"red\";\n    }\n\n    let style = {\n      boxSizing: \"border-box\",\n      position: \"absolute\",\n      backgroundColor: bgColor,\n      border: this.props.selected ? \"5px solid\" : \"1px solid\",\n      left: this.props.left + \"px\",\n      top: this.props.top + \"px\",\n      width: this.props.value + \"px\",\n      height: this.props.value + \"px\"\n    };\n    return React.createElement(\"div\", {\n      id: this.props.id,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.props.label);\n  }\n\n}\n\nclass Line extends Component {\n  render() {\n    const _this$props = this.props,\n          x1 = _this$props.x1,\n          y1 = _this$props.y1,\n          x2 = _this$props.x2,\n          y2 = _this$props.y2,\n          color = _this$props.color;\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n    const angle = Math.atan2(dy, dx) * 180 / Math.PI;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const style = {\n      position: 'absolute',\n      top: `${y1}px`,\n      left: `${x1}px`,\n      width: `${length}px`,\n      zIndex: Number.isFinite(this.props.zIndex) ? String(this.props.zIndex) : '1',\n      transform: `rotate(${angle}deg)`,\n      // Rotate around (x0, y0)\n      transformOrigin: '0 0',\n      borderTopColor: color ? color : \"black\",\n      borderTopStyle: \"dashed\",\n      borderTopWidth: \"1\"\n    };\n    return React.createElement(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass SteppedLine extends Component {\n  render() {\n    const _this$props2 = this.props,\n          x1 = _this$props2.x1,\n          y1 = _this$props2.y1,\n          x2 = _this$props2.x2,\n          y2 = _this$props2.y2;\n    const dy = y2 - y1;\n\n    if (dy === 0) {\n      return React.createElement(Line, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }));\n    }\n\n    const borderWidth = 1;\n    const x3 = (x1 + x2) / 2;\n    const yOffset = dy < 0 ? borderWidth : 0;\n    const minY = Math.min(y1, y2) - yOffset;\n    const maxY = Math.max(y1, y2);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Line, Object.assign({}, this.props, {\n      x1: x1,\n      y1: y1,\n      x2: x3,\n      y2: y1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Line, Object.assign({}, this.props, {\n      x1: x2,\n      y1: y2,\n      x2: x3,\n      y2: y2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(Line, Object.assign({}, this.props, {\n      x1: x3,\n      y1: minY,\n      x2: x3,\n      y2: maxY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction buildLinkElements(nodeFrom, nodeTo, linkID) {\n  let linkElements = [];\n  let color = \"black\";\n\n  if (nodeTo.fixed) {\n    color = \"lightgray\";\n  }\n\n  linkElements.push(React.createElement(Line, {\n    id: \"link-\" + linkID,\n    x1: nodeFrom.left + nodeFrom.value,\n    y1: nodeFrom.top + nodeFrom.value / 2,\n    x2: nodeTo.left - 5,\n    y2: nodeTo.top + nodeTo.value / 2,\n    color: color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n  linkElements.push(React.createElement(Line, {\n    id: \"linkb-\" + linkID,\n    x1: nodeTo.left - 10 - 5,\n    y1: nodeTo.top + nodeTo.value / 2 - 10,\n    x2: nodeTo.left - 2,\n    y2: nodeTo.top + nodeTo.value / 2,\n    color: color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }));\n  linkElements.push(React.createElement(Line, {\n    id: \"linkc-\" + linkID,\n    x1: nodeTo.left - 12 - 5,\n    y1: nodeTo.top + nodeTo.value / 2 + 10,\n    x2: nodeTo.left - 2,\n    y2: nodeTo.top + nodeTo.value / 2,\n    color: color,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }));\n  return linkElements;\n}\n\nvar UIModes = {\n  \"selection\": 1\n};\nObject.freeze(UIModes);\nvar KeyMappings = {\n  movementKey: \"w\"\n};\n\nfunction randomLevelInfo(numNodes, numEdges) {\n  var rDag = createRandomDAG(numNodes, numEdges);\n  console.log(\"randomDAG\", rDag);\n  var rUg = dagToUndirected(rDag);\n  console.log(\"undirectedEdges\", rUg);\n  var islands = graphIslands(rUg);\n  console.log(\"islands\", islands);\n  let largestIsland = islands[0];\n  islands.forEach(island => {\n    if (island.length > largestIsland.length) {\n      largestIsland = island;\n    }\n  });\n  largestIsland.sort();\n  let level = {\n    nodes: [],\n    links: [],\n    nodeOfInterest: largestIsland[largestIsland.length - 1]\n  };\n  largestIsland.forEach(nodeID => {\n    level.nodes.push({\n      name: nodeID\n    });\n    rDag[nodeID].forEach(connectedID => {\n      level.links.push([nodeID, connectedID.toString()]);\n    });\n  });\n  return level;\n}\n\nfunction levelInfo(levelName) {\n  if (levelName.startsWith(\"random\") === true) {\n    let _levelName$split = levelName.split(\"-\"),\n        _levelName$split2 = _slicedToArray(_levelName$split, 2),\n        _ = _levelName$split2[0],\n        numNodes = _levelName$split2[1];\n\n    numNodes = parseInt(numNodes);\n    let numEdges = randInt(1, maxDagEdges(numNodes));\n    console.log(\"GEN RANDOM LEVEL\", numNodes, numEdges);\n    return randomLevelInfo(numNodes, numEdges);\n  }\n\n  let levels = {\n    \"1\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }],\n      links: [[\"A\", \"B\"]],\n      nodeOfInterest: \"B\"\n    },\n    \"2\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }],\n      links: [],\n      nodeOfInterest: \"B\"\n    },\n    \"3\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"C\"\n      }],\n      links: [[\"A\", \"B\"], [\"B\", \"C\"]],\n      nodeOfInterest: \"C\"\n    },\n    \"4\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"C\"\n      }],\n      links: [[\"A\", \"C\"], [\"B\", \"C\"]],\n      nodeOfInterest: \"C\"\n    },\n    \"5\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"C\"\n      }],\n      links: [[\"B\", \"A\"], [\"B\", \"C\"]],\n      nodeOfInterest: \"C\"\n    },\n    \"6\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"C\"\n      }, {\n        name: \"D\"\n      }],\n      links: [[\"A\", \"B\"], [\"B\", \"C\"], [\"B\", \"D\"], [\"C\", \"D\"]],\n      nodeOfInterest: \"D\"\n    },\n    \"7\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"C\"\n      }, {\n        name: \"D\"\n      }],\n      links: [[\"A\", \"B\"], [\"B\", \"C\"], [\"C\", \"D\"]],\n      nodeOfInterest: \"D\"\n    },\n    \"8\": {\n      nodes: [{\n        name: \"A\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"C\"\n      }, {\n        name: \"D\"\n      }],\n      links: [[\"A\", \"B\"], [\"A\", \"D\"], [\"B\", \"C\"], [\"C\", \"D\"]],\n      nodeOfInterest: \"D\"\n    },\n    \"9\": {\n      nodes: [{\n        name: \"C\"\n      }, {\n        name: \"A\"\n      }, {\n        name: \"E\"\n      }, {\n        name: \"B\"\n      }, {\n        name: \"D\"\n      }, {\n        name: \"F\"\n      }],\n      links: [[\"C\", \"A\"], [\"A\", \"E\"], [\"C\", \"B\"], [\"B\", \"D\"], [\"E\", \"F\"], [\"D\", \"F\"]],\n      nodeOfInterest: \"F\"\n    },\n    \"10\": {\n      nodes: [],\n      links: [],\n      nodeOfInterest: null\n    }\n  };\n  return levels[levelName];\n}\n\nfunction levelSetup(levelName) {\n  let middle = 638;\n  let cellSpacing = 100;\n  let thisLevel = levelInfo(levelName);\n  console.log(\"thisLevel\", thisLevel);\n  let nodeID = 0; // Hidden Model\n\n  let observationNodes = {};\n  let nameToObsNodeID = {};\n  let nonInterestCount = 1;\n  thisLevel.nodes.forEach(node => {\n    nodeID += 1;\n    let row = 5;\n    let column = 1;\n\n    if (node.name !== thisLevel.nodeOfInterest) {\n      row = 4;\n      column = nonInterestCount;\n      nonInterestCount += 1;\n    }\n\n    nameToObsNodeID[node.name] = nodeID.toString();\n    observationNodes[nodeID.toString()] = {\n      id: nodeID.toString(),\n      name: node.name,\n      mirrorNode: true,\n      left: middle + row * cellSpacing,\n      top: column * cellSpacing\n    };\n  }); // Hypothetical\n\n  let hypoNodes = {};\n  Object.keys(observationNodes).forEach(obNodeID => {\n    nodeID += 1;\n    hypoNodes[nodeID.toString()] = {\n      id: nodeID.toString(),\n      name: observationNodes[obNodeID].name,\n      mirrorNode: false,\n      left: observationNodes[obNodeID].left - mirrorSpacing,\n      top: observationNodes[obNodeID].top\n    };\n  }); // All\n\n  let nodes = _objectSpread({}, observationNodes, {}, hypoNodes); // Default Values\n\n\n  Object.keys(nodes).forEach(x => {\n    nodes[x].value = 50;\n    nodes[x].interventionValue = null;\n    nodes[x].fixed = false;\n  }); // Links\n\n  let links = {};\n  thisLevel.links.forEach(edge => {\n    let _edge = _slicedToArray(edge, 2),\n        fromName = _edge[0],\n        toName = _edge[1];\n\n    let fromID = nameToObsNodeID[fromName];\n    let toID = nameToObsNodeID[toName];\n    links[fromID + \"-\" + toID] = {\n      name: \"\"\n    };\n  });\n  return [nodes, links];\n}\n\nclass ModelCanvas extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.getNode = nodeID => {\n      return this.state.nodes[nodeID];\n    };\n\n    this.getNodesByName = name => {\n      return Object.values(this.state.nodes).filter(x => x.name === name);\n    };\n\n    this.getMirrorSourceNode = name => {\n      return Object.values(this.state.nodes).filter(x => {\n        return x.mirrorNode === false && x.name === name;\n      })[0];\n    };\n\n    this.elementID = (type, id) => {\n      return type + \"-\" + id.toString();\n    };\n\n    this.submitNodeEdits = (nodeID, nodeState) => {\n      let nodes = _objectSpread({}, this.state.nodes);\n\n      nodes[nodeID].name = nodeState.name;\n      this.setState({\n        editingNodeID: null,\n        nodes: nodes\n      });\n    };\n\n    this.getUIMode = () => {\n      if (this.state.editingNodeID || this.state.editingModelInfo) {\n        return \"editing\";\n      }\n\n      return \"canvas\";\n    };\n\n    this.submitEditModel = modelState => {\n      this.setState({\n        editingModelInfo: false,\n        modelName: modelState.name\n      });\n    };\n\n    this.selectedUIElement = () => {\n      if (!this.state.selection) {\n        return [null, null];\n      }\n\n      return this.state.selection.split(\"-\");\n    };\n\n    this.getSelectedNode = () => {\n      var _this$selectedUIEleme = this.selectedUIElement(),\n          _this$selectedUIEleme2 = _slicedToArray(_this$selectedUIEleme, 2),\n          elementType = _this$selectedUIEleme2[0],\n          elementID = _this$selectedUIEleme2[1];\n\n      if (elementType === null) {\n        return null;\n      }\n\n      if (elementType !== \"node\") {\n        return null;\n      }\n\n      return this.state.nodes[elementID];\n    };\n\n    this.isMouseDown = () => {\n      return this.state.mouseDownClientX !== null;\n    };\n\n    this.resetInterventions = () => {\n      let _this$selectedUIEleme3 = this.selectedUIElement(),\n          _this$selectedUIEleme4 = _slicedToArray(_this$selectedUIEleme3, 2),\n          _ = _this$selectedUIEleme4[0],\n          selectedID = _this$selectedUIEleme4[1];\n\n      let nodes = _objectSpread({}, this.state.nodes);\n\n      Object.keys(nodes).forEach(nodeID => {\n        if (!nodes[nodeID].fixed && nodeID !== selectedID) {\n          nodes[nodeID].interventionValue = null;\n        }\n      });\n      this.setState({\n        nodes: nodes\n      });\n    };\n\n    this.changeNodeSelection = elementID => {\n      console.log(\"CHANGE SELECTION\", elementID); // select node, activate intervention\n\n      let stateChanges = {\n        selection: elementID\n      };\n\n      if (elementID) {\n        let nodes = _objectSpread({}, this.state.nodes);\n\n        let _this$parseElementInf = this.parseElementInfo(elementID),\n            _this$parseElementInf2 = _slicedToArray(_this$parseElementInf, 2),\n            _ = _this$parseElementInf2[0],\n            nodeID = _this$parseElementInf2[1];\n\n        nodes[nodeID].interventionValue = nodes[nodeID].value;\n        stateChanges[\"nodes\"] = nodes;\n      }\n\n      if (elementID === null) {\n        stateChanges[\"selectedInitialX\"] = null;\n        stateChanges[\"selectedInitialY\"] = null;\n      }\n\n      this.setState(stateChanges); // Handle clearing interventions\n\n      this.resetInterventions();\n    };\n\n    this.changeUIMode = newMode => {\n      console.log(\"Changing mode from\", this.state.uiMode, \"to\", newMode);\n      this.setState({\n        uiMode: newMode\n      });\n    };\n\n    this.parseElementInfo = elementID => {\n      if (!elementID) {\n        return [null, null];\n      }\n\n      if (elementID.slice(0, 4) === \"node\") {\n        return elementID.split(\"-\");\n      }\n\n      console.error(\"Don't understand what was selected\", elementID);\n      return [null, null];\n    };\n\n    this.newNodeID = () => {\n      if (Object.keys(this.state.nodes).length == 0) {\n        console.log(\"FIRST NODE\");\n        return 1;\n      }\n\n      let ids = Object.keys(this.state.nodes).map(x => parseInt(x));\n      ids.sort();\n      return ids[ids.length - 1] + 1;\n    };\n\n    this.saveModelsData = modelsData => {\n      // XXX: Move to settings\n      let dataPath = \"modelEditor.modelsData\";\n      localStorage.setItem(dataPath, JSON.stringify(modelsData));\n    };\n\n    this.loadModelsData = () => {\n      // XXX: Move to settings\n      let dataPath = \"modelEditor.modelsData\";\n      let modelsData = localStorage.getItem(dataPath); // Initialize if empty\n\n      if (modelsData === null) {\n        modelsData = {};\n      } else {\n        modelsData = JSON.parse(modelsData);\n      }\n\n      return modelsData;\n    };\n\n    this.saveCurrentModel = () => {\n      // Overwrite model\n      let modelsData = this.loadModelsData();\n      modelsData[this.state.modelName] = {\n        nodes: this.state.nodes,\n        links: this.state.links\n      };\n      this.saveModelsData(modelsData);\n      alert(\"success\");\n    };\n\n    this.loadModel = modelName => {\n      let modelsData = this.loadModelsData();\n\n      if (!(modelName in modelsData)) {\n        alert(\"No model by that name availible\");\n        return -1;\n      }\n\n      this.setState({\n        modelName: modelName,\n        nodes: modelsData[modelName].nodes,\n        links: modelsData[modelName].links\n      });\n    };\n\n    this.getModelNames = () => {\n      let modelsData = this.loadModelsData();\n      return Object.keys(modelsData);\n    };\n\n    this.newModel = () => {\n      this.saveCurrentModel();\n      this.setState({\n        modelName: \"NEW_MODEL\",\n        nodes: {},\n        links: {}\n      });\n    };\n\n    this.createNewNode = (left, top) => {\n      let nodeID = this.newNodeID();\n      let newNode = {\n        id: nodeID,\n        name: \"NODE \" + nodeID,\n        left: left,\n        top: top,\n        value: 50,\n        interventionValue: null,\n        fixed: false,\n        mirrorNode: false\n      };\n\n      let nodes = _objectSpread({}, this.state.nodes);\n\n      nodes[newNode.id] = newNode;\n      this.setState({\n        nodes: nodes\n      });\n      return newNode;\n    };\n\n    this.editNode = nodeID => {\n      this.setState({\n        editingNodeID: nodeID\n      });\n    };\n\n    this.editModelInfo = () => {\n      this.setState({\n        editingModelInfo: true\n      });\n    };\n\n    this.addEventListeners = () => {\n      document.addEventListener('keyup', event => {\n        this.setState({\n          keyDown: null\n        });\n      });\n      document.addEventListener('keydown', event => {\n        let _this$selectedUIEleme5 = this.selectedUIElement(),\n            _this$selectedUIEleme6 = _slicedToArray(_this$selectedUIEleme5, 2),\n            selectedElementType = _this$selectedUIEleme6[0],\n            selectedNodeID = _this$selectedUIEleme6[1]; // Track which key is down\n\n\n        this.setState({\n          keyDown: event.key\n        });\n        console.log(event.key);\n\n        if (this.getUIMode() === \"canvas\") {\n          if (event.key == \"f\") {\n            // this.changeUIMode(UIModes.movement)\n            //document.getElementById(this.modelCanvasID).style.cursor = \"move\";\n            if (selectedNodeID) {\n              let nodes = _objectSpread({}, this.state.nodes);\n\n              let node = nodes[selectedNodeID];\n              node.fixed = !node.fixed;\n              this.setState({\n                nodes: nodes\n              });\n            }\n          } // Save\n\n\n          if (event.key == \"S\") {\n            if (this.state.modelName === \"\") {\n              alert(\"Need name before saving\");\n            } else {\n              // XXX: Check if name is new so you don't overwrite\n              this.saveCurrentModel(); //localStorage[\"modelEditor.models\"] =\n            }\n          } // Load\n\n\n          if (event.key == \"L\") {\n            this.setState({\n              displayFloatingMenu: !this.state.displayFloatingMenu\n            });\n          } // New\n\n\n          if (event.key == \"N\") {\n            this.newModel();\n          } // Delete Node\n\n\n          if (event.key == \"Backspace\") {\n            if (selectedNodeID) {\n              let nodes = _objectSpread({}, this.state.nodes);\n\n              delete nodes[selectedNodeID];\n\n              let links = _objectSpread({}, this.state.links);\n\n              Object.keys(this.state.links).forEach(link => {\n                var _link$split = link.split(\"-\"),\n                    _link$split2 = _slicedToArray(_link$split, 2),\n                    nodeFrom = _link$split2[0],\n                    nodeTo = _link$split2[1];\n\n                if (nodeFrom === selectedNodeID) {\n                  delete links[link];\n                } else if (nodeTo === selectedNodeID) {\n                  delete links[link];\n                }\n\n                console.log(selectedNodeID, nodeFrom, nodeTo);\n              });\n              this.setState({\n                nodes: nodes,\n                links: links\n              });\n            }\n          }\n\n          if (event.key == \"H\") {\n            this.setState({\n              showObservationalLinks: !this.state.showObservationalLinks\n            });\n          }\n\n          if (event.key == \"?\") {\n            this.setState({\n              showHelpBox: !this.state.showHelpBox\n            });\n          }\n\n          if (event.key == \"e\") {\n            let selectedNode = this.getSelectedNode();\n\n            if (selectedNode !== null) {\n              this.editNode(selectedNode.id);\n            }\n          }\n\n          if (event.key == \"M\") {\n            this.editModelInfo();\n          }\n\n          if (event.key == \"a\") {\n            this.setState({\n              linkFromID: this.state.linkFromID === null ? this.state.selection : null\n            });\n          }\n\n          if (event.key === \"1\" || event.key === \"2\") {\n            if (this.state.uiMode === UIModes.selection) {\n              // If a node is selected, set the link from\n              if (selectedNodeID) {\n                let nodes = _objectSpread({}, this.state.nodes);\n\n                let node = nodes[selectedNodeID];\n                let delta = event.key === \"2\" ? 20 : -20;\n                node.interventionValue = node.interventionValue ? node.interventionValue + delta : node.value + delta;\n                node.interventionValue = Math.max(Math.min(node.interventionValue, 90), 30);\n                this.setState({\n                  nodes: nodes\n                });\n                this.evaluateModel();\n              }\n            }\n          }\n        }\n      });\n      document.addEventListener('mousedown', event => {\n        let targetElement = event.target;\n\n        let _this$parseElementInf3 = this.parseElementInfo(targetElement.id),\n            _this$parseElementInf4 = _slicedToArray(_this$parseElementInf3, 2),\n            targetType = _this$parseElementInf4[0],\n            targetID = _this$parseElementInf4[1];\n\n        console.log(\"MOUSE DOWN\", event.target, targetType, targetID);\n\n        if (targetType === \"node\") {\n          let targetNode = this.getNode(targetID);\n\n          if (this.state.linkFromID) {\n            console.log(\"mouse down on node\", targetElement.id); // Intent to Link, link to node\n\n            if (targetNode.mirrorNode === false) {\n              // Can't link mirrorNodes\n              let nodeFromID = this.state.linkFromID.split(\"-\")[1];\n              let nodeToID = targetID; // XXX use targetNode\n\n              if (nodeFromID !== nodeToID) {\n                let links = _objectSpread({}, this.state.links);\n\n                let linkID = nodeFromID + \"-\" + nodeToID;\n\n                if (linkID in links) {\n                  delete links[linkID];\n                } else {\n                  links[nodeFromID + \"-\" + nodeToID] = {\n                    name: \"\"\n                  };\n                }\n\n                this.setState({\n                  links: links,\n                  linkFromID: null\n                });\n              }\n            } else {\n              this.setState({\n                linkFromID: null\n              });\n            }\n          } else {\n            if (targetNode.mirrorNode === false) {\n              // Selected a different node\n              // Record Initial position when clicked on\n              //  - used for movement and drawing link arrow\n              //  XXX: move into with changeNodeSelection\n              this.setState({\n                selectedInitialX: targetNode.left,\n                selectedInitialY: targetNode.top\n              });\n              this.changeNodeSelection(targetElement.id);\n            }\n          }\n        } else {\n          // Clicked in \"white space\" (clear interventions)\n          this.setState({\n            linkFromID: null\n          });\n          this.changeNodeSelection(null);\n          this.changeUIMode(UIModes.selection);\n          this.evaluateModel();\n        }\n\n        let nowMs = new Date().getTime();\n\n        if (this.state.lastMouseDownTime !== null && nowMs - this.state.lastMouseDownTime <= 200) {\n          this.newCanvasNode(event.clientX, event.clientY - 43);\n        } // Stash mouse event info\n\n\n        this.setState({\n          mouseDownClientX: event.clientX,\n          mouseDownClientY: event.clientY,\n          lastMouseDownTime: nowMs\n        });\n      });\n      document.addEventListener('mouseup', event => {\n        this.setState({\n          mouseDownClientX: null,\n          mouseDownClientY: null\n        });\n      });\n      document.addEventListener('mousemove', event => {\n        // Record\n        this.setState({\n          mouseMoveClientX: event.clientX,\n          mouseMoveClientY: event.clientY\n        });\n\n        if (this.isMouseDown()) {\n          if (this.state.keyDown === null) {\n            // Move selected objects\n            if (this.state.selection) {\n              // Difference between initial down event\n              let xDiff = event.clientX - this.state.mouseDownClientX;\n              let yDiff = event.clientY - this.state.mouseDownClientY; // Move selected node\n\n              var _this$selectedUIEleme7 = this.selectedUIElement(),\n                  _this$selectedUIEleme8 = _slicedToArray(_this$selectedUIEleme7, 2),\n                  selectedElementType = _this$selectedUIEleme8[0],\n                  selectedNodeID = _this$selectedUIEleme8[1];\n\n              selectedNodeID = this.state.selection.split(\"-\")[1];\n\n              let nodes = _objectSpread({}, this.state.nodes);\n\n              nodes[selectedNodeID].left = this.state.selectedInitialX + xDiff;\n              nodes[selectedNodeID].top = this.state.selectedInitialY + yDiff;\n              this.setState({\n                nodes: nodes\n              });\n            }\n          }\n        }\n      });\n    };\n\n    this.changeLevel = levelName => {\n      let _levelSetup = levelSetup(levelName),\n          _levelSetup2 = _slicedToArray(_levelSetup, 2),\n          nodes = _levelSetup2[0],\n          links = _levelSetup2[1];\n\n      console.log(\"LEVEL SETUP\", nodes, links);\n      this.setState({\n        nodes: nodes,\n        links: links,\n        showObservationalLinks: false\n      });\n    };\n\n    this.evaluateModel = () => {\n      // Get node evaluation order\n      let edges = [];\n      let dependsOn = {};\n      Object.keys(this.state.links).forEach(link => {\n        let _link$split3 = link.split(\"-\"),\n            _link$split4 = _slicedToArray(_link$split3, 2),\n            from = _link$split4[0],\n            to = _link$split4[1]; // Edges\n\n\n        edges.push([from, to]); // Dependencies\n\n        if (to in dependsOn) {\n          dependsOn[to].push(from);\n        } else {\n          dependsOn[to] = [from];\n        }\n      });\n      let orderedDependentNodes = toposort(edges); // Update Model\n\n      let nodes = _objectSpread({}, this.state.nodes);\n\n      let independentNodes = [];\n      Object.keys(nodes).forEach(x => {\n        if (!(x in orderedDependentNodes)) {\n          independentNodes.push(x);\n        }\n      });\n      orderedDependentNodes.concat(independentNodes).forEach(nodeID => {\n        let thisNode = nodes[nodeID]; // Get intervention value to use (only changed for mirrored nodes)\n\n        let interventionValue = thisNode.interventionValue;\n\n        if (thisNode.mirrorNode === true) {\n          let mirrorSourceNode = this.getMirrorSourceNode(thisNode.name);\n          interventionValue = mirrorSourceNode.interventionValue;\n        }\n\n        if (interventionValue) {\n          // Intervention\n          thisNode.value = Math.round(interventionValue);\n        } else {\n          if (nodeID in dependsOn) {\n            // Average of input nodes\n            let count = 0;\n            let sum = 0.0;\n            dependsOn[nodeID].forEach(depNodeID => {\n              count += 1;\n              sum += nodes[depNodeID].value;\n            });\n            thisNode.value = Math.round(sum / count);\n          } else {\n            // Default value\n            thisNode.value = 50;\n          }\n        }\n      }); //nodes[\"1\"].value = Math.round(nodes[\"1\"].interventionValue || 50)\n      //nodes[\"2\"].value = Math.round(nodes[\"2\"].interventionValue || (30 + .3*nodes[\"1\"].value))\n\n      this.setState({\n        nodes: nodes\n      });\n    };\n\n    this.renderHelpBox = () => {\n      let boxContents = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134\n        },\n        __self: this\n      }, \"Press \\\"?\\\" for help\");\n\n      if (this.state.showHelpBox === true) {\n        boxContents = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1136\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1137\n          },\n          __self: this\n        }, \"Intervention\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1137\n          },\n          __self: this\n        }), \"\\\"1\\\" - make selected smaller\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1138\n          },\n          __self: this\n        }), \"\\\"2\\\" - make selected node bigger\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1139\n          },\n          __self: this\n        }), \"\\\"f\\\" - toggle \\\"fixing\\\" node\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1140\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1140\n          },\n          __self: this\n        }), React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1142\n          },\n          __self: this\n        }, \"Move\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1142\n          },\n          __self: this\n        }), \"Click and drag node\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1143\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1143\n          },\n          __self: this\n        }), React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1145\n          },\n          __self: this\n        }, \"Create Link\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1145\n          },\n          __self: this\n        }), \"Select node 1, press \\\"a\\\", select node 2\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1146\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1146\n          },\n          __self: this\n        }), React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1148\n          },\n          __self: this\n        }, \"Remove Link\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1148\n          },\n          __self: this\n        }), \"Select node 1, press \\\"a\\\", select node 2\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1149\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1149\n          },\n          __self: this\n        }), React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1151\n          },\n          __self: this\n        }, \"Toggle Answer\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1151\n          },\n          __self: this\n        }), \"\\\"H\\\"\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1152\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1152\n          },\n          __self: this\n        }));\n      }\n\n      let style = {\n        position: \"absolute\",\n        left: \"0px\"\n      };\n      return React.createElement(\"div\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1162\n        },\n        __self: this\n      }, boxContents);\n    };\n\n    this.renderLinkLine = () => {\n      if (this.state.linkFromID === null) {\n        return null;\n      } else {\n        console.log(\"linkFromID\", this.state.linkFromID);\n        let fromNode = this.getNode(this.state.linkFromID.split(\"-\")[1]);\n        console.log(fromNode);\n        let x1 = fromNode.left + fromNode.value;\n        let y1 = fromNode.top + fromNode.value / 2;\n        return React.createElement(Line, {\n          x1: x1,\n          y1: y1,\n          x2: this.state.mouseMoveClientX - 5,\n          y2: this.state.mouseMoveClientY - 43,\n          zIndex: -1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1179\n          },\n          __self: this\n        });\n      }\n    };\n\n    this.pickRandomLevel = () => {\n      let choice = randInt(3, 5);\n      console.log(\"CHOSE\", choice);\n      this.changeLevel(choice.toString());\n    };\n\n    this.handleLevelSelectionChange = event => {\n      this.setState({\n        levelSelection: event.target.value\n      });\n      this.changeLevel(event.target.value);\n    };\n\n    this.renderLevelSelect = () => {\n      let options = [];\n      let levels = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"random-5\", \"random-8\", \"random-10\", \"random-12\"];\n      levels.forEach(x => {\n        options.push(React.createElement(\"option\", {\n          key: x,\n          value: x,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1225\n          },\n          __self: this\n        }, x));\n      });\n      return React.createElement(\"select\", {\n        value: this.state.levelSelection,\n        onChange: this.handleLevelSelectionChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1236\n        },\n        __self: this\n      }, options);\n    };\n\n    this.state = {\n      modelName: \"\",\n      uiMode: UIModes.selection,\n      selection: null,\n      selectedInitialX: null,\n      selectedInitialY: null,\n      keyDown: null,\n      editingNodeID: null,\n      editingModelInfo: false,\n      displayFloatingMenu: false,\n      lastMouseDownTime: null,\n      mouseDownClientX: null,\n      mouseDownClientY: null,\n      linkFromID: null,\n      showObservationalLinks: false,\n      nodes: {},\n      links: {},\n      levelSelection: \"10\",\n      showHelpBox: false\n    };\n    this.modelCanvasID = \"modelCanvas\";\n  }\n\n  newCanvasNode(left, top) {\n    let newNode = this.createNewNode(left, top);\n    this.changeNodeSelection(\"node-\" + newNode.id);\n    this.editNode(newNode.id);\n  }\n\n  componentDidMount() {\n    this.addEventListeners();\n    this.changeLevel(\"10\");\n  }\n\n  render() {\n    let nodeElements = [];\n    Object.entries(this.state.nodes).forEach(entry => {\n      let _entry = _slicedToArray(entry, 2),\n          nodeID = _entry[0],\n          node = _entry[1];\n\n      let uiElementID = \"node-\" + nodeID;\n      let selected = this.state.selection === uiElementID;\n      let fixed = node.fixed;\n      let left = node.left;\n      let top = node.top;\n\n      if (node.mirrorNode === true) {\n        // selection\n        let mirrorSourceElement = this.getMirrorSourceNode(node.name);\n        let mirrorSourceElementID = this.elementID(\"node\", mirrorSourceElement.id);\n        selected = this.state.selection === mirrorSourceElementID; // fixed\n\n        fixed = mirrorSourceElement.fixed;\n        left = mirrorSourceElement.left + mirrorSpacing;\n        top = mirrorSourceElement.top;\n      }\n\n      nodeElements.push(React.createElement(Node, {\n        id: uiElementID,\n        label: node.name,\n        selected: selected,\n        left: left,\n        top: top,\n        value: node.value,\n        fixed: fixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1271\n        },\n        __self: this\n      }));\n    });\n    let linkElements = [];\n    Object.keys(this.state.links).forEach(linkID => {\n      var _linkID$split = linkID.split(\"-\"),\n          _linkID$split2 = _slicedToArray(_linkID$split, 2),\n          nodeFromID = _linkID$split2[0],\n          nodeToID = _linkID$split2[1];\n\n      let nodeFrom = this.state.nodes[nodeFromID];\n      let nodeTo = this.state.nodes[nodeToID];\n      let shouldShow = nodeFrom.mirrorNode === false || this.state.showObservationalLinks === true;\n\n      if (shouldShow) {\n        if (nodeFrom.mirrorNode === true) {\n          let mirrorNodeFrom = this.getMirrorSourceNode(nodeFrom.name);\n          let mirrorNodeTo = this.getMirrorSourceNode(nodeTo.name);\n          let linkNodeFrom = {\n            left: mirrorNodeFrom.left + mirrorSpacing,\n            top: mirrorNodeFrom.top,\n            value: nodeFrom.value\n          };\n          let linkNodeTo = {\n            left: mirrorNodeTo.left + mirrorSpacing,\n            top: mirrorNodeTo.top,\n            value: nodeTo.value\n          };\n          buildLinkElements(linkNodeFrom, linkNodeTo, linkID).forEach(x => {\n            linkElements.push(x);\n          });\n        } else {\n          buildLinkElements(nodeFrom, nodeTo, linkID).forEach(x => {\n            linkElements.push(x);\n          });\n        }\n      }\n    });\n    let editbox = null;\n\n    if (this.state.editingNodeID) {\n      editbox = React.createElement(EditNodeForm, {\n        key: this.state.editingNodeID,\n        nodeID: this.state.editingNodeID,\n        left: 0,\n        top: 0,\n        nodeInfo: _objectSpread({}, this.state.nodes[this.state.editingNodeID]),\n        onSubmit: this.submitNodeEdits,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1328\n        },\n        __self: this\n      });\n    }\n\n    let editModelForm = null;\n\n    if (this.state.editingModelInfo === true) {\n      editbox = React.createElement(EditModelForm, {\n        name: this.state.modelName,\n        left: 0,\n        top: 0,\n        onSubmit: this.submitEditModel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1341\n        },\n        __self: this\n      });\n    }\n\n    let modelNameBox = null;\n\n    if (this.state.modelName !== \"\") {\n      modelNameBox = React.createElement(\"div\", {\n        style: {\n          alignSelf: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1353\n        },\n        __self: this\n      }, \"MODEL: \", this.state.modelName);\n    }\n\n    let floatingMenu = null;\n\n    if (this.state.displayFloatingMenu) {\n      let modelNames = this.getModelNames();\n      floatingMenu = React.createElement(FloatingMenu, {\n        left: 0,\n        top: 0,\n        items: modelNames,\n        onMenuItemClick: item => {\n          this.loadModel(item);\n          this.setState({\n            displayFloatingMenu: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1359\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      id: this.modelCanvasID,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1372\n      },\n      __self: this\n    }, modelNameBox, \"Select Level\", this.renderLevelSelect(), this.renderHelpBox()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1378\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.pickRandomLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1379\n      },\n      __self: this\n    }, \"Random Level\")), editbox, floatingMenu, nodeElements, this.renderLinkLine(), linkElements, React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"436px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389\n      },\n      __self: this\n    }, \"Hypothesis\"), React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"836px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1390\n      },\n      __self: this\n    }, \"Observations\"), React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"636px\",\n        height: \"800px\",\n        width: \"2px\",\n        backgroundColor: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1391\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ModelCanvas;","map":{"version":3,"sources":["/Users/chris/causality_game/src/CausalGame.js"],"names":["React","Component","toposort","createRandomDAG","dagToUndirected","graphIslands","maxDagEdges","randInt","EditNodeForm","EditModelForm","FloatingMenu","mirrorSpacing","Node","constructor","props","context","render","bgColor","fixed","style","boxSizing","position","backgroundColor","border","selected","left","top","width","value","height","id","label","Line","x1","y1","x2","y2","color","dy","dx","angle","Math","atan2","PI","length","sqrt","zIndex","Number","isFinite","String","transform","transformOrigin","borderTopColor","borderTopStyle","borderTopWidth","SteppedLine","borderWidth","x3","yOffset","minY","min","maxY","max","buildLinkElements","nodeFrom","nodeTo","linkID","linkElements","push","UIModes","Object","freeze","KeyMappings","movementKey","randomLevelInfo","numNodes","numEdges","rDag","console","log","rUg","islands","largestIsland","forEach","island","sort","level","nodes","links","nodeOfInterest","nodeID","name","connectedID","toString","levelInfo","levelName","startsWith","split","_","parseInt","levels","levelSetup","middle","cellSpacing","thisLevel","observationNodes","nameToObsNodeID","nonInterestCount","node","row","column","mirrorNode","hypoNodes","keys","obNodeID","x","interventionValue","edge","fromName","toName","fromID","toID","ModelCanvas","getNode","state","getNodesByName","values","filter","getMirrorSourceNode","elementID","type","submitNodeEdits","nodeState","setState","editingNodeID","getUIMode","editingModelInfo","submitEditModel","modelState","modelName","selectedUIElement","selection","getSelectedNode","elementType","isMouseDown","mouseDownClientX","resetInterventions","selectedID","changeNodeSelection","stateChanges","parseElementInfo","changeUIMode","newMode","uiMode","slice","error","newNodeID","ids","map","saveModelsData","modelsData","dataPath","localStorage","setItem","JSON","stringify","loadModelsData","getItem","parse","saveCurrentModel","alert","loadModel","getModelNames","newModel","createNewNode","newNode","editNode","editModelInfo","addEventListeners","document","addEventListener","event","keyDown","selectedElementType","selectedNodeID","key","displayFloatingMenu","link","showObservationalLinks","showHelpBox","selectedNode","linkFromID","delta","evaluateModel","targetElement","target","targetType","targetID","targetNode","nodeFromID","nodeToID","selectedInitialX","selectedInitialY","nowMs","Date","getTime","lastMouseDownTime","newCanvasNode","clientX","clientY","mouseDownClientY","mouseMoveClientX","mouseMoveClientY","xDiff","yDiff","changeLevel","edges","dependsOn","from","to","orderedDependentNodes","independentNodes","concat","thisNode","mirrorSourceNode","round","count","sum","depNodeID","renderHelpBox","boxContents","renderLinkLine","fromNode","pickRandomLevel","choice","handleLevelSelectionChange","levelSelection","renderLevelSelect","options","modelCanvasID","componentDidMount","nodeElements","entries","entry","uiElementID","mirrorSourceElement","mirrorSourceElementID","shouldShow","mirrorNodeFrom","mirrorNodeTo","linkNodeFrom","linkNodeTo","editbox","editModelForm","modelNameBox","alignSelf","floatingMenu","modelNames","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport toposort from 'toposort'\n\nimport { createRandomDAG, dagToUndirected, graphIslands, maxDagEdges, randInt } from './DAG'\nimport EditNodeForm from './EditNodeForm'\nimport EditModelForm from './EditModelForm'\nimport FloatingMenu from './FloatingMenu'\n\nvar mirrorSpacing = 650\n\nclass Node extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n    }\n\n    render() {\n\n        let bgColor = \"green\"\n        if (this.props.fixed) {\n            bgColor = \"red\"\n        }\n\n        let style = {\n            boxSizing: \"border-box\",\n            position: \"absolute\",\n            backgroundColor: bgColor,\n            border: this.props.selected ? \"5px solid\" : \"1px solid\",\n\n            left: this.props.left + \"px\",\n            top: this.props.top + \"px\",\n            width: this.props.value + \"px\",\n            height: this.props.value + \"px\",\n        }\n\n        return (\n            <div id={this.props.id} style={style}>{this.props.label}</div>\n        )\n\n    }\n}\n\nclass Line extends Component {\n\n    render() {\n\n        const {x1, y1, x2, y2, color} = this.props\n\n        const dy = y2 - y1\n        const dx = x2 - x1\n\n        const angle = Math.atan2(dy, dx) * 180 / Math.PI\n        const length = Math.sqrt(dx * dx + dy * dy)\n\n        const style = {\n            position: 'absolute',\n\n            top: `${y1}px`,\n            left: `${x1}px`,\n            width: `${length}px`,\n\n            zIndex: Number.isFinite(this.props.zIndex) ? String(this.props.zIndex) : '1',\n            transform: `rotate(${angle}deg)`,\n\n            // Rotate around (x0, y0)\n            transformOrigin: '0 0',\n\n            borderTopColor: color ? color : \"black\",\n            borderTopStyle: \"dashed\",\n            borderTopWidth: \"1\",\n        }\n\n        return <div style={style}></div>\n\n    }\n\n}\n\nclass SteppedLine extends Component {\n\n    render() {\n\n        const { x1, y1, x2, y2 } = this.props\n\n        const dy = y2 - y1\n        if (dy === 0) {\n            return <Line {...this.props} />\n        }\n\n        const borderWidth = 1\n        const x3 = (x1 + x2) / 2\n\n        const yOffset = dy < 0 ? borderWidth : 0\n        const minY = Math.min(y1, y2) - yOffset\n        const maxY = Math.max(y1, y2)\n\n        return (\n            <div>\n                <Line {...this.props} x1={x1} y1={y1} x2={x3} y2={y1} />\n                <Line {...this.props} x1={x2} y1={y2} x2={x3} y2={y2} />\n                <Line {...this.props} x1={x3} y1={minY} x2={x3} y2={maxY} />\n            </div>\n        )\n\n    }\n\n}\n\n\nfunction buildLinkElements(nodeFrom, nodeTo, linkID) {\n    let linkElements = []\n\n    let color = \"black\"\n    if (nodeTo.fixed) {\n        color = \"lightgray\"\n    }\n\n    linkElements.push(\n        <Line\n            id={\"link-\" + linkID}\n\n            x1={nodeFrom.left + nodeFrom.value}\n            y1={nodeFrom.top + (nodeFrom.value / 2)}\n\n            x2={nodeTo.left - 5}\n            y2={nodeTo.top + (nodeTo.value / 2)}\n\n            color={color}\n        />\n    )\n\n    linkElements.push(\n        <Line\n            id={\"linkb-\" + linkID}\n\n            x1={nodeTo.left - 10 - 5}\n            y1={nodeTo.top + (nodeTo.value / 2) - 10}\n\n            x2={nodeTo.left - 2}\n            y2={nodeTo.top + (nodeTo.value / 2)}\n\n            color={color}\n        />\n\n    )\n\n    linkElements.push(\n        <Line\n            id={\"linkc-\" + linkID}\n\n            x1={nodeTo.left - 12 - 5}\n            y1={nodeTo.top + (nodeTo.value / 2) + 10}\n\n            x2={nodeTo.left - 2}\n            y2={nodeTo.top + (nodeTo.value / 2)}\n\n            color={color}\n        />\n\n    )\n    return linkElements\n}\n\n\n\nvar UIModes = {\n    \"selection\": 1,\n}\nObject.freeze(UIModes)\n\nvar KeyMappings = {\n    movementKey: \"w\",\n}\n\nfunction randomLevelInfo(numNodes, numEdges) {\n\n    var rDag = createRandomDAG(numNodes, numEdges)\n    console.log(\"randomDAG\", rDag)\n\n    var rUg = dagToUndirected(rDag)\n    console.log(\"undirectedEdges\", rUg)\n\n    var islands = graphIslands(rUg)\n    console.log(\"islands\", islands)\n\n    let largestIsland = islands[0]\n    islands.forEach(island => {\n        if (island.length > largestIsland.length) {\n            largestIsland = island\n        }\n    })\n\n    largestIsland.sort()\n\n    let level = {\n        nodes: [],\n        links: [],\n        nodeOfInterest: largestIsland[largestIsland.length - 1],\n    }\n\n    largestIsland.forEach(nodeID => {\n        level.nodes.push({\n            name: nodeID,\n        })\n\n        rDag[nodeID].forEach(connectedID => {\n            level.links.push([nodeID, connectedID.toString()])\n        })\n    })\n\n    return level\n}\n\nfunction levelInfo(levelName) {\n\n    if (levelName.startsWith(\"random\") === true) {\n        let [_, numNodes] = levelName.split(\"-\")\n        numNodes = parseInt(numNodes)\n\n        let numEdges = randInt(1, maxDagEdges(numNodes))\n        console.log(\"GEN RANDOM LEVEL\", numNodes, numEdges)\n        return randomLevelInfo(numNodes, numEdges)\n\n    }\n\n    let levels = {\n        \"1\": {\n            nodes: [\n                {\n                    name: \"A\",\n                },\n                {\n                    name: \"B\",\n                },\n            ],\n            links: [\n                [\"A\", \"B\"],\n            ],\n            nodeOfInterest: \"B\",\n        },\n        \"2\": {\n            nodes: [\n                {\n                    name: \"A\",\n                },\n                {\n                    name: \"B\",\n                },\n            ],\n            links: [],\n            nodeOfInterest: \"B\",\n        },\n        \"3\": {\n            nodes: [\n                {\n                    name: \"A\",\n                },\n                {\n                    name: \"B\",\n                },\n                {\n                    name: \"C\",\n                },\n            ],\n            links: [\n                [\"A\", \"B\"],\n                [\"B\", \"C\"],\n            ],\n            nodeOfInterest: \"C\",\n        },\n        \"4\": {\n            nodes: [\n                {\n                    name: \"A\",\n                },\n                {\n                    name: \"B\",\n                },\n                {\n                    name: \"C\",\n                },\n            ],\n            links: [\n                [\"A\", \"C\"],\n                [\"B\", \"C\"],\n            ],\n            nodeOfInterest: \"C\",\n        },\n        \"5\": {\n            nodes: [\n                {\n                    name: \"A\",\n                },\n                {\n                    name: \"B\",\n                },\n                {\n                    name: \"C\",\n                },\n            ],\n            links: [\n                [\"B\", \"A\"],\n                [\"B\", \"C\"],\n            ],\n            nodeOfInterest: \"C\",\n        },\n        \"6\": {\n            nodes: [\n                { name: \"A\", },\n                { name: \"B\", },\n                { name: \"C\", },\n                { name: \"D\", },\n            ],\n            links: [\n                [\"A\", \"B\"],\n                [\"B\", \"C\"],\n                [\"B\", \"D\"],\n                [\"C\", \"D\"],\n            ],\n            nodeOfInterest: \"D\",\n        },\n        \"7\": {\n            nodes: [\n                { name: \"A\", },\n                { name: \"B\", },\n                { name: \"C\", },\n                { name: \"D\", },\n            ],\n            links: [\n                [\"A\", \"B\"],\n                [\"B\", \"C\"],\n                [\"C\", \"D\"],\n            ],\n            nodeOfInterest: \"D\",\n        },\n        \"8\": {\n            nodes: [\n                { name: \"A\", },\n                { name: \"B\", },\n                { name: \"C\", },\n                { name: \"D\", },\n            ],\n            links: [\n                [\"A\", \"B\"],\n                [\"A\", \"D\"],\n                [\"B\", \"C\"],\n                [\"C\", \"D\"],\n            ],\n            nodeOfInterest: \"D\",\n        },\n        \"9\": {\n            nodes: [\n                { name: \"C\", },\n\n                { name: \"A\", },\n                { name: \"E\", },\n\n                { name: \"B\", },\n                { name: \"D\", },\n\n                { name: \"F\", },\n            ],\n            links: [\n                [\"C\", \"A\"],\n                [\"A\", \"E\"],\n\n                [\"C\", \"B\"],\n                [\"B\", \"D\"],\n\n                [\"E\", \"F\"],\n                [\"D\", \"F\"],\n            ],\n            nodeOfInterest: \"F\",\n        },\n        \"10\": {\n            nodes: [],\n            links: [],\n            nodeOfInterest: null,\n        },\n    }\n\n    return levels[levelName]\n\n}\n\nfunction levelSetup(levelName) {\n\n    let middle = 638\n    let cellSpacing = 100\n\n    let thisLevel = levelInfo(levelName)\n    console.log(\"thisLevel\", thisLevel)\n\n    let nodeID = 0\n\n    // Hidden Model\n    let observationNodes = {}\n    let nameToObsNodeID = {}\n    let nonInterestCount = 1\n    thisLevel.nodes.forEach(node => {\n        nodeID += 1\n\n        let row = 5\n        let column = 1\n        if (node.name !== thisLevel.nodeOfInterest) {\n            row = 4\n            column = nonInterestCount\n            nonInterestCount += 1\n        }\n\n        nameToObsNodeID[node.name] = nodeID.toString()\n        observationNodes[nodeID.toString()] = {\n            id: nodeID.toString(),\n            name: node.name,\n            mirrorNode: true,\n\n            left: middle + (row * cellSpacing),\n            top: column * cellSpacing,\n        }\n    })\n\n    // Hypothetical\n    let hypoNodes = {}\n    Object.keys(observationNodes).forEach(obNodeID => {\n        nodeID += 1\n        hypoNodes[nodeID.toString()] = {\n            id: nodeID.toString(),\n            name: observationNodes[obNodeID].name,\n            mirrorNode: false,\n            left: observationNodes[obNodeID].left - mirrorSpacing,\n            top: observationNodes[obNodeID].top,\n        }\n    })\n\n    // All\n    let nodes = {...observationNodes, ...hypoNodes}\n\n    // Default Values\n    Object.keys(nodes).forEach(x => {\n        nodes[x].value = 50\n        nodes[x].interventionValue = null\n        nodes[x].fixed = false\n    })\n\n\n    // Links\n    let links = {}\n    thisLevel.links.forEach(edge => {\n        let [fromName, toName] = edge\n        let fromID = nameToObsNodeID[fromName]\n        let toID = nameToObsNodeID[toName]\n\n        links[fromID + \"-\" + toID] = {name: \"\"}\n    })\n\n    return [nodes, links]\n\n}\n\nclass ModelCanvas extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n\n            modelName: \"\",\n\n            uiMode: UIModes.selection,\n\n            selection: null,\n\n            selectedInitialX: null,\n            selectedInitialY: null,\n\n            keyDown: null,\n\n            editingNodeID: null,\n\n            editingModelInfo: false,\n\n            displayFloatingMenu: false,\n\n            lastMouseDownTime: null,\n\n            mouseDownClientX: null,\n            mouseDownClientY: null,\n\n            linkFromID: null,\n\n            showObservationalLinks: false,\n\n            nodes: {},\n\n            links: {},\n\n            levelSelection: \"10\",\n\n            showHelpBox: false,\n        }\n\n        this.modelCanvasID = \"modelCanvas\"\n\n    }\n\n    getNode = (nodeID) => {\n        return this.state.nodes[nodeID]\n    }\n\n    getNodesByName = (name) => {\n        return Object.values(this.state.nodes).filter(x => x.name === name)\n    }\n\n    getMirrorSourceNode = (name) => {\n        return Object.values(this.state.nodes).filter(x => {\n            return (x.mirrorNode === false && x.name === name)\n        })[0]\n    }\n\n    elementID = (type, id) => {\n        return type + \"-\" + id.toString()\n    }\n\n    submitNodeEdits = (nodeID, nodeState) => {\n        let nodes = {...this.state.nodes}\n        nodes[nodeID].name = nodeState.name\n\n        this.setState({\n            editingNodeID: null,\n            nodes: nodes,\n        })\n    }\n\n    getUIMode = () => {\n        if (this.state.editingNodeID || this.state.editingModelInfo) {\n            return \"editing\"\n        }\n\n        return \"canvas\"\n    }\n\n    submitEditModel = (modelState) => {\n        this.setState({\n            editingModelInfo: false,\n            modelName: modelState.name,\n        })\n    }\n\n    selectedUIElement = () => {\n        if (!this.state.selection) {\n            return [null, null]\n        }\n\n        return this.state.selection.split(\"-\")\n\n    }\n\n    getSelectedNode = () => {\n        var [elementType, elementID] = this.selectedUIElement()\n        if (elementType === null) {\n            return null\n        }\n\n        if (elementType !== \"node\") {\n            return null\n        }\n\n        return this.state.nodes[elementID]\n    }\n\n    isMouseDown = () => {\n        return this.state.mouseDownClientX !== null\n    }\n\n    resetInterventions = () => {\n\n        let [_, selectedID] = this.selectedUIElement()\n        let nodes = {...this.state.nodes}\n        Object.keys(nodes).forEach(nodeID => {\n            if (!nodes[nodeID].fixed && (nodeID !== selectedID)) {\n                nodes[nodeID].interventionValue = null\n            }\n        })\n\n        this.setState({\n            nodes:nodes,\n        })\n\n\n    }\n\n    changeNodeSelection = (elementID) => {\n\n        console.log(\"CHANGE SELECTION\", elementID)\n\n        // select node, activate intervention\n        let stateChanges = {\n            selection: elementID,\n        }\n        if (elementID) {\n            let nodes = {...this.state.nodes}\n            let [_, nodeID] = this.parseElementInfo(elementID)\n            nodes[nodeID].interventionValue = nodes[nodeID].value\n            stateChanges[\"nodes\"] = nodes\n        }\n\n        if (elementID === null) {\n            stateChanges[\"selectedInitialX\"] = null\n            stateChanges[\"selectedInitialY\"] = null\n        }\n        this.setState(stateChanges)\n\n\n\n        // Handle clearing interventions\n        this.resetInterventions()\n    }\n\n    changeUIMode = (newMode) => {\n        console.log(\"Changing mode from\", this.state.uiMode, \"to\", newMode)\n        this.setState({\n            uiMode: newMode,\n        })\n    }\n\n    parseElementInfo = (elementID) => {\n        if (!elementID) {\n            return [null, null]\n        }\n\n        if (elementID.slice(0,4) === \"node\") {\n            return elementID.split(\"-\")\n        }\n\n        console.error(\"Don't understand what was selected\", elementID)\n        return [null, null]\n    }\n\n    newNodeID = () => {\n        if (Object.keys(this.state.nodes).length == 0) {\n            console.log(\"FIRST NODE\")\n            return 1\n        }\n        let ids = Object.keys(this.state.nodes).map(x => parseInt(x))\n        ids.sort()\n        return ids[ids.length - 1] + 1\n    }\n\n    saveModelsData = (modelsData) => {\n        // XXX: Move to settings\n        let dataPath = \"modelEditor.modelsData\"\n        localStorage.setItem(dataPath, JSON.stringify(modelsData))\n    }\n\n    loadModelsData = () => {\n        // XXX: Move to settings\n        let dataPath = \"modelEditor.modelsData\"\n        let modelsData = localStorage.getItem(dataPath)\n\n        // Initialize if empty\n        if (modelsData === null) {\n            modelsData = {}\n        } else {\n            modelsData = JSON.parse(modelsData)\n        }\n\n        return modelsData\n\n    }\n\n    saveCurrentModel = () => {\n\n        // Overwrite model\n        let modelsData = this.loadModelsData()\n        modelsData[this.state.modelName] = {\n            nodes: this.state.nodes,\n            links: this.state.links,\n        }\n        this.saveModelsData(modelsData)\n\n        alert(\"success\")\n    }\n\n    loadModel = (modelName) => {\n        let modelsData = this.loadModelsData()\n        if (!(modelName in modelsData)) {\n            alert(\"No model by that name availible\")\n            return -1\n        }\n\n        this.setState({\n            modelName: modelName,\n            nodes: modelsData[modelName].nodes,\n            links: modelsData[modelName].links,\n        })\n    }\n\n    getModelNames = () => {\n        let modelsData = this.loadModelsData()\n        return Object.keys(modelsData)\n    }\n\n    newModel = () => {\n        this.saveCurrentModel()\n\n        this.setState({\n            modelName: \"NEW_MODEL\",\n            nodes: {},\n            links: {},\n        })\n\n    }\n\n    createNewNode = (left, top) => {\n        let nodeID = this.newNodeID()\n\n        let newNode = {\n            id: nodeID,\n            name: \"NODE \" + nodeID,\n\n            left: left,\n            top: top,\n\n            value: 50,\n            interventionValue: null,\n            fixed: false,\n            mirrorNode: false,\n        }\n\n        let nodes = {...this.state.nodes}\n        nodes[newNode.id] = newNode\n        this.setState({\n            nodes: nodes,\n        })\n\n        return newNode\n    }\n\n    editNode = (nodeID) => {\n        this.setState({\n            editingNodeID: nodeID,\n        })\n    }\n\n    editModelInfo = () => {\n        this.setState({\n            editingModelInfo: true,\n        })\n    }\n\n    newCanvasNode(left, top) {\n        let newNode = this.createNewNode(\n            left,\n            top,\n        )\n\n        this.changeNodeSelection(\"node-\" + newNode.id)\n        this.editNode(newNode.id)\n    }\n\n    addEventListeners = () => {\n\n        document.addEventListener('keyup', (event) => {\n            this.setState({\n                keyDown: null,\n            })\n\n        })\n\n        document.addEventListener('keydown', (event) => {\n\n            let [selectedElementType, selectedNodeID] = this.selectedUIElement()\n\n            // Track which key is down\n            this.setState({\n                keyDown: event.key,\n            })\n\n            console.log(event.key)\n\n            if (this.getUIMode() === \"canvas\") {\n\n                if (event.key == \"f\") {\n                    // this.changeUIMode(UIModes.movement)\n                    //document.getElementById(this.modelCanvasID).style.cursor = \"move\";\n\n                    if (selectedNodeID) {\n                        let nodes = {...this.state.nodes}\n                        let node = nodes[selectedNodeID]\n\n                        node.fixed = !node.fixed\n                        this.setState({\n                            nodes: nodes,\n                        })\n                    }\n                }\n\n                // Save\n                if (event.key == \"S\") {\n                    if (this.state.modelName === \"\") {\n                        alert(\"Need name before saving\")\n                    } else {\n                        // XXX: Check if name is new so you don't overwrite\n\n                        this.saveCurrentModel()\n                        //localStorage[\"modelEditor.models\"] =\n                    }\n                }\n\n                // Load\n                if (event.key == \"L\") {\n                    this.setState({\n                        displayFloatingMenu: !this.state.displayFloatingMenu,\n                    })\n                }\n\n                // New\n                if (event.key == \"N\") {\n                    this.newModel()\n                }\n\n                // Delete Node\n                if (event.key == \"Backspace\") {\n                    if(selectedNodeID) {\n                        let nodes = {...this.state.nodes}\n                        delete nodes[selectedNodeID]\n\n                        let links = {...this.state.links}\n                        Object.keys(this.state.links).forEach(link => {\n                            var [nodeFrom, nodeTo] = link.split(\"-\")\n                            if (nodeFrom === selectedNodeID) {\n                                delete links[link]\n                            } else if (nodeTo === selectedNodeID) {\n                                delete links[link]\n                            }\n                            console.log(selectedNodeID, nodeFrom, nodeTo)\n                        })\n\n                        this.setState({\n                            nodes: nodes,\n                            links: links,\n                        })\n                    }\n                }\n\n\n                if (event.key == \"H\") {\n                    this.setState({\n                        showObservationalLinks: !this.state.showObservationalLinks,\n                    })\n                }\n\n                if (event.key == \"?\") {\n                    this.setState({\n                        showHelpBox: !this.state.showHelpBox,\n                    })\n                }\n\n                if (event.key == \"e\") {\n                    let selectedNode = this.getSelectedNode()\n                    if (selectedNode !== null) {\n                        this.editNode(selectedNode.id)\n                    }\n                }\n\n                if (event.key == \"M\") {\n                    this.editModelInfo()\n                }\n\n                if (event.key == \"a\") {\n                    this.setState({\n                        linkFromID: this.state.linkFromID === null ? this.state.selection : null,\n                    })\n                }\n\n                if (event.key === \"1\" || event.key === \"2\") {\n\n                    if (this.state.uiMode === UIModes.selection) {\n\n                        // If a node is selected, set the link from\n                        if(selectedNodeID) {\n                            let nodes = {...this.state.nodes}\n\n                            let node = nodes[selectedNodeID]\n                            let delta = event.key === \"2\" ? 20 : -20\n\n\n                            node.interventionValue = node.interventionValue ? (node.interventionValue + delta) : node.value + delta\n                            node.interventionValue = Math.max(Math.min(node.interventionValue, 90), 30)\n                            this.setState({\n                                nodes: nodes,\n                            })\n\n                            this.evaluateModel()\n                        }\n                    }\n                }\n            }\n\n        })\n\n        document.addEventListener('mousedown', (event) => {\n\n            let targetElement = event.target\n            let [targetType, targetID] = this.parseElementInfo(targetElement.id)\n\n            console.log(\"MOUSE DOWN\", event.target, targetType, targetID)\n\n            if (targetType === \"node\") {\n\n                let targetNode = this.getNode(targetID)\n\n                if (this.state.linkFromID) {\n\n                    console.log(\"mouse down on node\", targetElement.id)\n\n                    // Intent to Link, link to node\n                    if (targetNode.mirrorNode === false) {\n                        // Can't link mirrorNodes\n\n                        let nodeFromID = this.state.linkFromID.split(\"-\")[1]\n                        let nodeToID = targetID // XXX use targetNode\n\n                        if (nodeFromID !== nodeToID) {\n                            let links = {...this.state.links}\n\n                            let linkID  = nodeFromID + \"-\" + nodeToID\n                            if (linkID in links) {\n                                delete links[linkID]\n                            } else {\n                                links[nodeFromID + \"-\" + nodeToID] = {\n                                    name: \"\",\n                                }\n                            }\n\n                            this.setState({\n                                links:links,\n                                linkFromID: null,\n                            })\n                        }\n                    } else {\n                        this.setState({\n                            linkFromID: null,\n                        })\n                    }\n\n                } else {\n\n                    if (targetNode.mirrorNode === false) {\n                        // Selected a different node\n\n                        // Record Initial position when clicked on\n                        //  - used for movement and drawing link arrow\n                        //  XXX: move into with changeNodeSelection\n                        this.setState({\n                            selectedInitialX: targetNode.left,\n                            selectedInitialY: targetNode.top,\n                        })\n\n                        this.changeNodeSelection(targetElement.id)\n                    }\n                }\n\n            } else {\n\n                // Clicked in \"white space\" (clear interventions)\n                this.setState({\n                    linkFromID: null,\n                })\n\n                this.changeNodeSelection(null)\n\n                this.changeUIMode(UIModes.selection)\n\n                this.evaluateModel()\n            }\n\n\n            let nowMs = (new Date).getTime()\n            if (this.state.lastMouseDownTime !== null && ((nowMs - this.state.lastMouseDownTime) <= 200)) {\n                this.newCanvasNode(event.clientX, event.clientY - 43)\n            }\n\n\n            // Stash mouse event info\n            this.setState({\n                mouseDownClientX: event.clientX,\n                mouseDownClientY: event.clientY,\n                lastMouseDownTime: nowMs,\n            })\n\n\n        })\n\n        document.addEventListener('mouseup', (event) => {\n            this.setState({\n                mouseDownClientX: null,\n                mouseDownClientY: null,\n            })\n        })\n\n        document.addEventListener('mousemove', (event) => {\n\n            // Record\n            this.setState({\n                mouseMoveClientX: event.clientX,\n                mouseMoveClientY: event.clientY,\n            })\n\n            if (this.isMouseDown()) {\n\n                if (this.state.keyDown === null) {\n\n                    // Move selected objects\n                    if (this.state.selection) {\n\n                        // Difference between initial down event\n                        let xDiff = event.clientX - this.state.mouseDownClientX\n                        let yDiff = event.clientY - this.state.mouseDownClientY\n\n\n                        // Move selected node\n                        var [selectedElementType, selectedNodeID] = this.selectedUIElement()\n\n                        selectedNodeID = this.state.selection.split(\"-\")[1]\n\n                        let nodes = {...this.state.nodes}\n                        nodes[selectedNodeID].left = this.state.selectedInitialX + xDiff\n                        nodes[selectedNodeID].top = this.state.selectedInitialY + yDiff\n\n                        this.setState({\n                            nodes: nodes,\n                        })\n                    }\n\n                }\n            }\n\n        })\n\n    }\n\n    componentDidMount() {\n        this.addEventListeners()\n\n        this.changeLevel(\"10\")\n\n    }\n\n    changeLevel = (levelName) => {\n        let [nodes, links] = levelSetup(levelName)\n        console.log(\"LEVEL SETUP\", nodes, links)\n\n        this.setState({\n            nodes: nodes,\n            links: links,\n            showObservationalLinks: false,\n        })\n\n    }\n\n    evaluateModel = () => {\n\n        // Get node evaluation order\n        let edges = []\n        let dependsOn = {}\n        Object.keys(this.state.links).forEach(link => {\n            let [from, to] = link.split(\"-\")\n\n            // Edges\n            edges.push([from, to])\n\n            // Dependencies\n            if (to in dependsOn) {\n                dependsOn[to].push(from)\n            } else {\n                dependsOn[to] = [from]\n            }\n        })\n        let orderedDependentNodes = toposort(edges)\n\n\n        // Update Model\n        let nodes = {...this.state.nodes}\n        let independentNodes = []\n        Object.keys(nodes).forEach(x => {\n            if (!(x in orderedDependentNodes)) {\n                independentNodes.push(x)\n            }\n        })\n\n        orderedDependentNodes.concat(independentNodes).forEach(nodeID => {\n            let thisNode = nodes[nodeID]\n\n            // Get intervention value to use (only changed for mirrored nodes)\n            let interventionValue = thisNode.interventionValue\n            if (thisNode.mirrorNode === true) {\n                let mirrorSourceNode = this.getMirrorSourceNode(thisNode.name)\n                interventionValue = mirrorSourceNode.interventionValue\n            }\n\n            if (interventionValue) {\n                // Intervention\n                thisNode.value = Math.round(interventionValue)\n            } else {\n                if (nodeID in dependsOn) {\n                    // Average of input nodes\n                    let count = 0\n                    let sum = 0.0\n                    dependsOn[nodeID].forEach(depNodeID => {\n                        count += 1\n                        sum += nodes[depNodeID].value\n                    })\n                    thisNode.value = Math.round(sum / count)\n                } else {\n                    // Default value\n                    thisNode.value = 50\n                }\n            }\n\n        })\n\n        //nodes[\"1\"].value = Math.round(nodes[\"1\"].interventionValue || 50)\n        //nodes[\"2\"].value = Math.round(nodes[\"2\"].interventionValue || (30 + .3*nodes[\"1\"].value))\n\n        this.setState({\n            nodes: nodes,\n        })\n    }\n\n    renderHelpBox = () => {\n\n        let boxContents = <div>Press \"?\" for help</div>\n        if (this.state.showHelpBox === true) {\n            boxContents = <div>\n                <strong>Intervention</strong><br />\n                \"1\" - make selected smaller<br />\n                \"2\" - make selected node bigger<br />\n                \"f\" - toggle \"fixing\" node<br /><br />\n\n                <strong>Move</strong><br />\n                Click and drag node<br /><br />\n\n                <strong>Create Link</strong><br />\n                Select node 1, press \"a\", select node 2<br /><br />\n\n                <strong>Remove Link</strong><br />\n                Select node 1, press \"a\", select node 2<br /><br />\n\n                <strong>Toggle Answer</strong><br />\n                \"H\"<br /><br />\n            </div>\n        }\n\n\n        let style = {\n            position: \"absolute\",\n            left: \"0px\",\n        }\n\n        return <div style={style}>\n            {boxContents}\n        </div>\n    }\n\n    renderLinkLine = () => {\n        if (this.state.linkFromID === null) {\n            return null\n        } else {\n            console.log(\"linkFromID\", this.state.linkFromID)\n            let fromNode = this.getNode(this.state.linkFromID.split(\"-\")[1])\n\n            console.log(fromNode)\n\n            let x1 = fromNode.left + fromNode.value\n            let y1 = fromNode.top + (fromNode.value / 2)\n\n            return <Line\n                x1={x1}\n                y1={y1}\n\n                x2={this.state.mouseMoveClientX - 5}\n                y2={this.state.mouseMoveClientY - 43}\n\n                zIndex={-1}\n            />\n        }\n    }\n    pickRandomLevel = () => {\n        let choice = randInt(3, 5)\n        console.log(\"CHOSE\", choice)\n        this.changeLevel(choice.toString())\n    }\n\n    handleLevelSelectionChange = (event) => {\n        this.setState({\n            levelSelection: event.target.value,\n        })\n        this.changeLevel(event.target.value)\n    }\n\n    renderLevelSelect = () => {\n\n        let options = []\n        let levels = [\n            \"1\",\n            \"2\",\n            \"3\",\n            \"4\",\n            \"5\",\n            \"6\",\n            \"7\",\n            \"8\",\n            \"9\",\n            \"10\",\n            \"random-5\",\n            \"random-8\",\n            \"random-10\",\n            \"random-12\",\n        ]\n\n        levels.forEach(x => {\n            options.push(\n                <option\n                    key={x}\n                    value={x}\n                >\n                    {x}\n                </option>\n            )\n\n        })\n\n        return (\n            <select\n                value={this.state.levelSelection}\n                onChange={this.handleLevelSelectionChange}\n            >\n                {options}\n            </select>\n        )\n    }\n\n    render() {\n\n        let nodeElements = []\n        Object.entries(this.state.nodes).forEach((entry) => {\n            let [nodeID, node] = entry\n            let uiElementID = \"node-\" + nodeID\n\n            let selected = this.state.selection === uiElementID\n            let fixed = node.fixed\n            let left = node.left\n            let top = node.top\n            if (node.mirrorNode === true) {\n                // selection\n                let mirrorSourceElement = this.getMirrorSourceNode(node.name)\n\n                let mirrorSourceElementID = this.elementID(\"node\", mirrorSourceElement.id)\n                selected = this.state.selection === mirrorSourceElementID\n\n                // fixed\n                fixed = mirrorSourceElement.fixed\n                left = mirrorSourceElement.left + mirrorSpacing\n                top = mirrorSourceElement.top\n            }\n\n\n            nodeElements.push(\n                <Node\n                    id={uiElementID}\n                    label={node.name}\n\n                    selected={selected}\n\n                    left={left}\n                    top={top}\n\n                    value={node.value}\n                    fixed={fixed}\n                />\n            )\n        })\n\n        let linkElements = []\n        Object.keys(this.state.links).forEach((linkID) => {\n            var [nodeFromID, nodeToID] = linkID.split(\"-\")\n\n            let nodeFrom = this.state.nodes[nodeFromID]\n            let nodeTo = this.state.nodes[nodeToID]\n\n            let shouldShow = (nodeFrom.mirrorNode === false) || (this.state.showObservationalLinks === true)\n\n\n            if (shouldShow) {\n                if (nodeFrom.mirrorNode === true) {\n                    let mirrorNodeFrom = this.getMirrorSourceNode(nodeFrom.name)\n                    let mirrorNodeTo = this.getMirrorSourceNode(nodeTo.name)\n\n                    let linkNodeFrom = {\n                        left: mirrorNodeFrom.left + mirrorSpacing,\n                        top: mirrorNodeFrom.top,\n                        value: nodeFrom.value,\n                    }\n\n                    let linkNodeTo = {\n                        left: mirrorNodeTo.left + mirrorSpacing,\n                        top: mirrorNodeTo.top,\n                        value: nodeTo.value,\n                    }\n\n                    buildLinkElements(linkNodeFrom, linkNodeTo, linkID).forEach(x => {\n                        linkElements.push(x)\n                    })\n\n                } else {\n\n                    buildLinkElements(nodeFrom, nodeTo, linkID).forEach(x => {\n                        linkElements.push(x)\n                    })\n                }\n            }\n        })\n\n        let editbox = null\n        if (this.state.editingNodeID) {\n            editbox = <EditNodeForm key={this.state.editingNodeID}\n                nodeID={this.state.editingNodeID}\n\n                left={0}\n                top={0}\n\n                nodeInfo={{...this.state.nodes[this.state.editingNodeID]}}\n                onSubmit={this.submitNodeEdits}\n            />\n        }\n\n        let editModelForm = null\n        if (this.state.editingModelInfo === true) {\n            editbox = <EditModelForm\n                name={this.state.modelName}\n\n                left={0}\n                top={0}\n\n                onSubmit={this.submitEditModel}\n            />\n        }\n\n        let modelNameBox = null\n        if (this.state.modelName !== \"\") {\n            modelNameBox = <div style={{alignSelf: \"right\"}}>MODEL: {this.state.modelName}</div>\n        }\n\n        let floatingMenu = null\n        if (this.state.displayFloatingMenu) {\n            let modelNames = this.getModelNames()\n            floatingMenu = <FloatingMenu\n                left={0}\n                top={0}\n                items={modelNames}\n                onMenuItemClick={(item) => {\n                    this.loadModel(item)\n                    this.setState({displayFloatingMenu:false})\n                }}\n            />\n        }\n\n        return (\n            <div id={this.modelCanvasID} style={{width: \"100%\", height: \"100%\"}}>\n                <div>\n                    {modelNameBox}\n                    Select Level\n                    {this.renderLevelSelect()}\n                    {this.renderHelpBox()}\n                </div>\n                <div>\n                    <button onClick={this.pickRandomLevel}>Random Level</button>\n                </div>\n                {editbox}\n                {floatingMenu}\n\n                {nodeElements}\n\n                {this.renderLinkLine()}\n                {linkElements}\n\n                <div style={{position: \"absolute\", left: \"436px\"}}>Hypothesis</div>\n                <div style={{position: \"absolute\", left: \"836px\"}}>Observations</div>\n                <div style={{position: \"absolute\", left: \"636px\", height: \"800px\", width: \"2px\", backgroundColor: \"black\"}}></div>\n\n            </div>\n        )\n\n    }\n\n}\n\n\nexport default ModelCanvas\n"]},"metadata":{},"sourceType":"module"}