{"ast":null,"code":"import _slicedToArray from \"/Users/chris/causality_game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/chris/causality_game/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport function maxDagEdges(numNodes) {\n  return (numNodes - 1) * (numNodes / 2);\n}\n\nfunction sampleWithoutReplacement(choices) {\n  let chosenIndex = parseInt(Math.random() * choices.length);\n  let choice = choices.splice(chosenIndex, 1); // Reads \"remove 1 element from array starting at X\"\n\n  return choice[0];\n}\n\nexport function randInt(lowerInclusive, upperInclusive) {\n  return parseInt(lowerInclusive + Math.random() * (upperInclusive - lowerInclusive + 1));\n}\n\nfunction bfsUndirected(edges, startingNodeID) {\n  /*\n  edges ~ {\n      nodeID: [nodeID2, ...],\n  }\n   */\n  let queue = [startingNodeID];\n  let visited = [startingNodeID];\n\n  while (queue.length > 0) {\n    var nodeID = queue.shift(); // left pop\n\n    edges[nodeID].forEach(connectedID => {\n      if (visited.indexOf(connectedID.toString()) < 0) {\n        visited.push(connectedID.toString());\n        queue.push(connectedID.toString());\n      }\n    });\n  }\n\n  return visited;\n}\n\nexport function dagToUndirected(edges) {\n  let undirectedEdges = _objectSpread({}, edges);\n\n  let edgesUndirected = {};\n  Object.keys(edges).forEach(nodeID => {\n    edgesUndirected[nodeID] = [];\n  });\n  Object.keys(edges).forEach(fromID => {\n    edges[fromID].forEach(toID => {\n      if (!(toID in edgesUndirected[fromID])) {\n        edgesUndirected[fromID].push(toID);\n      }\n\n      if (!(fromID in edgesUndirected[toID])) {\n        edgesUndirected[toID].push(parseInt(fromID));\n      }\n    });\n  });\n  return edgesUndirected;\n}\nexport function graphIslands(edges) {\n  /*\n  Given undirected graph, find all subgraphs that are disconnected from each other\n  */\n  let nodeIDs = new Set(Object.keys(edges));\n  let islands = [];\n  let iteration = 0;\n\n  while (nodeIDs.size && iteration < 10) {\n    iteration += 1;\n    console.log(\"ISLANDS\", iteration, islands, nodeIDs);\n    var someID = Array.from(nodeIDs.values())[0];\n    var visited = bfsUndirected(edges, someID);\n    console.log(\"bfs visited\", visited);\n    islands.push(visited);\n    visited.forEach(x => {\n      nodeIDs.delete(x);\n    });\n  }\n\n  return islands;\n}\nexport function createRandomDAG(numNodes, numEdges) {\n  // Setup unconnected graph\n  let edges = {};\n\n  for (var i = 0; i < numNodes; i++) {\n    edges[i] = [];\n  } // Create sampling array with lower triangular edge choices\n  // Lower Triangular adjacency matrix is a dag\n\n\n  let edgeChoices = [];\n\n  for (var i = 0; i < numNodes - 1; i++) {\n    for (var j = i + 1; j < numNodes; j++) {\n      edgeChoices.push([i, j]);\n    }\n  } // Make random connections\n  // Sample without replacement\n\n\n  for (var i = 0; i < numEdges; i++) {\n    console.log(i);\n\n    let _sampleWithoutReplace = sampleWithoutReplacement(edgeChoices),\n        _sampleWithoutReplace2 = _slicedToArray(_sampleWithoutReplace, 2),\n        fromID = _sampleWithoutReplace2[0],\n        toID = _sampleWithoutReplace2[1];\n\n    edges[fromID].push(toID);\n  }\n\n  return edges;\n}","map":{"version":3,"sources":["/Users/chris/causality_game/src/DAG.js"],"names":["maxDagEdges","numNodes","sampleWithoutReplacement","choices","chosenIndex","parseInt","Math","random","length","choice","splice","randInt","lowerInclusive","upperInclusive","bfsUndirected","edges","startingNodeID","queue","visited","nodeID","shift","forEach","connectedID","indexOf","toString","push","dagToUndirected","undirectedEdges","edgesUndirected","Object","keys","fromID","toID","graphIslands","nodeIDs","Set","islands","iteration","size","console","log","someID","Array","from","values","x","delete","createRandomDAG","numEdges","i","edgeChoices","j"],"mappings":"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","sourcesContent":["\nexport function maxDagEdges(numNodes) {\n    return (numNodes - 1) * (numNodes / 2)\n}\n\nfunction sampleWithoutReplacement(choices) {\n    let chosenIndex = parseInt(Math.random() * choices.length)\n    let choice = choices.splice(chosenIndex, 1) // Reads \"remove 1 element from array starting at X\"\n    return choice[0]\n}\n\nexport function randInt(lowerInclusive, upperInclusive) {\n    return parseInt(lowerInclusive + (Math.random() * (upperInclusive - lowerInclusive + 1)))\n}\n\nfunction bfsUndirected(edges, startingNodeID) {\n    /*\n    edges ~ {\n        nodeID: [nodeID2, ...],\n    }\n     */\n    let queue = [startingNodeID]\n    let visited = [startingNodeID]\n\n    while (queue.length > 0) {\n        var nodeID = queue.shift() // left pop\n        edges[nodeID].forEach(connectedID => {\n            if (visited.indexOf(connectedID.toString()) < 0) {\n                visited.push(connectedID.toString())\n                queue.push(connectedID.toString())\n            }\n        })\n    }\n\n    return visited\n}\n\nexport function dagToUndirected(edges) {\n    let undirectedEdges = {...edges}\n\n    let edgesUndirected = {}\n    Object.keys(edges).forEach(nodeID => {\n        edgesUndirected[nodeID] = []\n    })\n\n    Object.keys(edges).forEach(fromID => {\n        edges[fromID].forEach(toID => {\n            if (!(toID in edgesUndirected[fromID])) {\n                edgesUndirected[fromID].push(toID)\n            }\n\n            if (!(fromID in edgesUndirected[toID])) {\n                edgesUndirected[toID].push(parseInt(fromID))\n            }\n        })\n    })\n\n    return edgesUndirected\n}\n\nexport function graphIslands(edges) {\n    /*\n    Given undirected graph, find all subgraphs that are disconnected from each other\n    */\n\n    let nodeIDs = new Set(Object.keys(edges))\n\n    let islands = []\n    let iteration = 0\n    while (nodeIDs.size && (iteration < 10)) {\n        iteration += 1\n        console.log(\"ISLANDS\", iteration, islands, nodeIDs)\n\n        var someID = Array.from(nodeIDs.values())[0]\n        var visited = bfsUndirected(edges, someID)\n        console.log(\"bfs visited\", visited)\n        islands.push(visited)\n\n        visited.forEach(x => {\n            nodeIDs.delete(x)\n        })\n    }\n\n    return islands\n}\n\nexport function createRandomDAG(numNodes, numEdges) {\n\n    // Setup unconnected graph\n    let edges = {}\n    for (var i=0; i<numNodes; i++) {\n        edges[i] = []\n    }\n\n    // Create sampling array with lower triangular edge choices\n    // Lower Triangular adjacency matrix is a dag\n    let edgeChoices = []\n    for (var i=0; i < (numNodes - 1); i++) {\n        for (var j=i+1; j < numNodes; j++) {\n            edgeChoices.push([i, j])\n        }\n    }\n\n    // Make random connections\n    // Sample without replacement\n    for (var i=0; i < numEdges; i++) {\n        console.log(i)\n        let [fromID, toID] = sampleWithoutReplacement(edgeChoices)\n        edges[fromID].push(toID)\n    }\n\n    return edges\n}\n"]},"metadata":{},"sourceType":"module"}